import random
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from helper.database import codeflixbots
from config import *
from config import Config
from config import Txt

# Start Command Handler
@Client.on_message(filters.private & filters.command("start"))
async def start(client, message: Message):
    user = message.from_user
    await codeflixbots.add_user(client, message)

    # Initial interactive text and sticker sequence
    m = await message.reply_text("‚òéÔ∏è")
    await asyncio.sleep(0.5)
    await m.edit_text("<code>D·¥á·¥†…™ ü ·¥ç·¥Ä è ·¥Ñ Ä è...</code>")
    await asyncio.sleep(0.4)
    await m.edit_text("‚ö°")
    await asyncio.sleep(0.5)
    await m.edit_text("<code>J·¥Ä·¥Ñ·¥ã·¥ò·¥è·¥õ!!!</code>")
    await asyncio.sleep(0.4)
    await m.delete()

    # Send sticker after the text sequence
    await message.reply_sticker("CAACAgQAAxkBAAIOsGf5RIq9Zodm25_NfFJGKNFNFJv5AALHGAACukfIUwkk20UPuRnvNgQ")

    # Define buttons for the start message
    buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚Ä¢ ·¥ç è ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚Ä¢", callback_data='help')
        ],
        
        [
            InlineKeyboardButton("‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", callback_data='premiumx')
        ],
        
        [
            InlineKeyboardButton('‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/+ecWFJBaAGZpjMGY1'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/weebs_talk_station')
        ],
        [
            InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
            #InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á ‚Ä¢', callback_data='source')
        ]
    ])

    # Send start message with or without picture
    if Config.START_PIC:
        await message.reply_photo(
            Config.START_PIC,
            caption=Txt.START_TXT.format(user.mention),
            reply_markup=buttons
        )
    else:
        await message.reply_text(
            text=Txt.START_TXT.format(user.mention),
            reply_markup=buttons,
            disable_web_page_preview=True
        )

# Settings callback helper function
async def settings_callback(client, callback_query: CallbackQuery):
    """Handle settings callback from main menu"""
    user_id = callback_query.from_user.id
    
    try:
        # Get current user settings
        upload_as_document = await codeflixbots.get_upload_mode(user_id)
        destination_info = await codeflixbots.get_upload_destination(user_id)
        
        # Format upload mode text
        upload_mode_text = "Send As Document ‚úÖ" if upload_as_document else "Send As Media ‚úÖ"
        
        # Format destination text
        if destination_info and destination_info.get('chat_id'):
            dest_name = destination_info.get('name', 'Unknown Channel/Group')
            destination_text = f"üìç Destination: {dest_name}"
        else:
            destination_text = "üìç Destination: Private Chat (Default)"
        
        settings_text = f"""üîß **Bot Settings**

**Current Configuration:**
üì§ Upload Mode: {upload_mode_text}
{destination_text}

Choose an option to modify:"""

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üì§ Send As Document" if not upload_as_document else "üì§ Send As Media", 
                    callback_data="settings_toggle_upload_mode"
                ),
                InlineKeyboardButton("üìç Set Upload Destination", callback_data="settings_set_destination")
            ],
            [
                InlineKeyboardButton("üîô Back to Menu", callback_data="home")
            ]
        ])
        
        await callback_query.message.edit_text(settings_text, reply_markup=keyboard)
        
    except Exception as e:
        await callback_query.answer(f"‚ùå Error loading settings: {str(e)}")

# Callback Query Handler
@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data
    user_id = query.from_user.id

    print(f"Callback data received: {data}")  # Debugging line

    if data == "home":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ ·¥ç è ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚Ä¢", callback_data='help')],
                [InlineKeyboardButton("‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", callback_data='premiumx')],
                [InlineKeyboardButton('‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/+ecWFJBaAGZpjMGY1'), InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/weebs_talk_station')],
                [InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')]
            ])
        )
    elif data == "caption":
        await query.message.edit_text(
            text=Txt.CAPTION_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/weebs_talk_station'), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ ·¥Ä·¥ú·¥õ·¥è  Ä·¥á…¥·¥Ä·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ ‚Ä¢", callback_data='file_names')],
                [InlineKeyboardButton("‚Ä¢ s·¥á«´·¥ú·¥á…¥·¥Ñ·¥á “ì…™ ü·¥ás ‚Ä¢", callback_data='sequence_help')],
                [InlineKeyboardButton('‚Ä¢ ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü', callback_data='thumbnail'), InlineKeyboardButton('·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ‚Ä¢', callback_data='caption')],
                [InlineKeyboardButton('‚Ä¢ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä', callback_data='meta'), InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢', callback_data='donate')],
                [InlineKeyboardButton('‚Ä¢ s·¥á·¥õ·¥õ…™…¥…¢s', callback_data='settings_main')],
                [InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á', callback_data='home')]
            ])
        )

    elif data == "settings_main":
        await settings_callback(client, query)

    elif data == "sequence_help":
        await query.message.edit_text(
            text=Txt.SEQUENCE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "meta":
        await query.message.edit_text(
            text=Txt.SEND_METADATA,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "donate":
        await query.message.edit_text(
            text=Txt.DONATE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥è·¥°…¥·¥á Ä ‚Ä¢", url='https://t.me/IntrovertSama')]
            ])
        )
    elif data == "file_names":
        format_template = await codeflixbots.get_format_template(user_id)
        await query.message.edit_text(
            text=Txt.FILE_NAME_TXT.format(format_template=format_template),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/weebs_talk_station'), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "thumbnail":
        await query.message.edit_text(
            text=Txt.THUMBNAIL_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/weebs_talk_station'), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/weebs_talk_station'), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="home")]
            ])
        )
    elif data == "premiumx":
        await query.message.edit_text(
            text=Txt.PREMIUM_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", callback_data="plans"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="home")]
            ])
        )
    elif data == "plans":
        await query.message.edit_text(
            text=Txt.PLANS_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã", callback_data="premiumx"), InlineKeyboardButton("·¥è·¥°…¥·¥á Ä ‚Ä¢", url='https://t.me/IntrovertSama')]
            ])
        )
    elif data == "close":
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass
